# -*- coding: utf-8 -*-
"""TSP_HillClimbing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UZhZlboLl627PLbKrrudMiQ2N2gQc7an
"""

import math
import random
import matplotlib.pyplot as plt
# open file
f = open('input2.txt', 'r')

n = int(f.readline())
xcord = [float(x) for x in f.readline().split(' ')][:n]
ycord = [float(x) for x in f.readline().split(' ')][:n]
print(f'{n}')

plt.show()
axes = plt.gca()
line, = axes.plot(xcord, ycord,'ro-')

def dist(xcord, ycord, i, j):
  x1 = xcord[i]
  y1 = ycord[i]
  x2 = xcord[j]
  y2 = ycord[j]
  return (math.sqrt((x1-x2)**2 + (y1-y2)**2))

x = [i for i in range(n)]
xcord = [xcord[x[i]] for i in range(n)]
ycord = [ycord[x[i]] for i in range(n)]

initial_cost = sum([dist(xcord, ycord, i, (i+1)%n) for i in range(n)])

def heuristic(xcord, ycord, i, j, current_cost):
  total = current_cost

  if i == 0 and j == n-1:
    i, j = j, i

  if j!=(i+1)%n:
    total -= dist(xcord, ycord, i, (i+1)%n)
    total -= dist(xcord, ycord, j, (j-1+n)%n)
    total += dist(xcord, ycord, j, (i+1)%n)
    total += dist(xcord, ycord, i, (j-1+n)%n)

  total -= dist(xcord, ycord, i, (i-1+n)%n)
  total -= dist(xcord, ycord, j, (j+1)%n)
  total += dist(xcord, ycord, i, (j+1)%n)
  total += dist(xcord, ycord, j, (i-1+n)%n)
  return (total)

def draw(finished, iteration, cost):
  newxcord = xcord.copy() + [xcord[0]]
  newycord = ycord.copy() + [ycord[0]]

  title = "Final " if finished else "iteration no. %d \n" % iteration
  title = title + ("total distance = %.2f \n" % cost)
  plt.title(title, fontsize = 15)

  plt.show()
  axes = plt.gca()
  line, = axes.plot(newxcord, newycord, 'ro-')

import math
import random
import matplotlib.pyplot as plt
# open file
f = open('input2.txt', 'r')

def Accent_Hill_Climbing(xcord, ycord, initial_cost, x):
  current_cost = initial_cost


  for t in range(200):

    draw(False, t+1, current_cost)


    print("iteration = ", t+1)
    print("total distance = %.2f" % current_cost)

    newtotal = current_cost
    swapi, swapj = -1, -1
    

    for i in range(n):
      for j in range(n):
        if i != j and i < j:

          neighbour = heuristic(xcord, ycord, i, j, current_cost)

          if neighbour < newtotal:
            newtotal = neighbour
            swapi = i
            swapj = j

    if newtotal < current_cost:
      x[swapi], x[swapj] = x[swapj], x[swapi]
      xcord[swapi], xcord[swapj] = xcord[swapj], xcord[swapi]
      ycord[swapi], ycord[swapj] = ycord[swapj], ycord[swapi]
      current_cost = newtotal
      print("swapped ", swapi, swapj)
    else:
      # halt 
      print("finish")
      break


  print("Final order = ", x)
  print("Initial cost = ", initial_cost)
  print("Final cost = ", current_cost)
 

  draw(True, 0, current_cost)
  plt.show()

Accent_Hill_Climbing(xcord, ycord, initial_cost, x)

import math
import random
import matplotlib.pyplot as plt
# open file
f = open('input2.txt', 'r')

n = int(f.readline())
xcord = [float(x) for x in f.readline().split(' ')][:n]
ycord = [float(x) for x in f.readline().split(' ')][:n]
print(f'{n}')

def Simple_Hill_Climbing(xcord, ycord, initial_cost, x):
  current_cost = initial_cost


  for t in range(200):

    draw(False, t+1, current_cost)


    print("iteration = ", t+1)
    print("total distance = %.2f" % current_cost)

    newtotal = current_cost
    swapi, swapj = -1, -1
    
    flag=False
    for i in range(n):
      for j in range(n):
        if i != j and i < j:

          neighbour = heuristic(xcord, ycord, i, j, current_cost)

          if neighbour < newtotal:
            newtotal = neighbour
            swapi = i
            swapj = j
            flag=True
            break
      
      if flag==True:
        break

    if newtotal < current_cost:

      x[swapi], x[swapj] = x[swapj], x[swapi]
      xcord[swapi], xcord[swapj] = xcord[swapj], xcord[swapi]
      ycord[swapi], ycord[swapj] = ycord[swapj], ycord[swapi]
      current_cost = newtotal
      print("swapped ", swapi, swapj)
    else:
      # halt 
      print("finish")
      break


  print("Final order = ", x)
  print("Initial cost = ", initial_cost)
  print("Final cost = ", current_cost)
 

  draw(True, 0, current_cost)
  plt.show()

Simple_Hill_Climbing(xcord, ycord, initial_cost, x)

import math
import random
import matplotlib.pyplot as plt
# open file
f = open('input2.txt', 'r')

n = int(f.readline())
xcord = [float(x) for x in f.readline().split(' ')][:n]
ycord = [float(x) for x in f.readline().split(' ')][:n]
print(f'{n}')

def global_hill(xcord, ycord, initial_cost, x):
  current_cost = initial_cost
  min_cost=initial_cost
  final_xcord=xcord
  final_ycord=ycord
  final_order=x
  for t in range(200):

    draw(False, t+1, current_cost)

    print("iteration = ", t+1)
    print("total distance = %.2f" % current_cost)

    newtotal = current_cost
    swapi, swapj = -1, -1
    
    if min_cost>current_cost:
      min_cost=current_cost
      final_xcord=xcord
      final_ycord=ycord
      final_order=x


    for i in range(n):
      for j in range(n):
        if i != j and i < j:
          neighbour = heuristic(xcord, ycord, i, j, current_cost)

          if neighbour < newtotal:
            newtotal = neighbour
            swapi = i
            swapj = j

    if newtotal < current_cost:
      x[swapi], x[swapj] = x[swapj], x[swapi]
      xcord[swapi], xcord[swapj] = xcord[swapj], xcord[swapi]
      ycord[swapi], ycord[swapj] = ycord[swapj], ycord[swapi]
      current_cost = newtotal
      print("swapped ", swapi, swapj)
    else:
      # halt
      print("finish")
      # break
      swapi=random.randrange(0, n)
      swapj=swapi=random.randrange(0, n)
      x[swapi], x[swapj] = x[swapj], x[swapi]
      xcord[swapi], xcord[swapj] = xcord[swapj], xcord[swapi]
      ycord[swapi], ycord[swapj] = ycord[swapj], ycord[swapi]
      current_cost=heuristic(xcord, ycord, swapi, swapj, current_cost)

  print("Final order = ", final_order)
  print("Initial cost = ", initial_cost)
  print("Final cost = ", min_cost)

  final_xcord = final_xcord.copy() + [final_xcord[0]]
  final_ycord = final_ycord.copy() + [final_ycord[0]]
  plt.show()
  axes = plt.gca()
  line, = axes.plot(final_xcord, final_ycord, 'ro-')

global_hill(xcord, ycord, initial_cost, x)

